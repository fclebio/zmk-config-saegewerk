//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "keys_pt_abnt2.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define ENGRAM   0
#define NAV      1
#define PROD     2
#define QWERTY   3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cecedilha: cecedilha {
            compatible = "zmk,behavior-mod-morph";
            label = "CECEDILHA";
            bindings = <&kp C>, <&kp PT_C_CEDILLA>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PT_DOT>, <&kp PT_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_masculine_ordinal: o_masculine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "O_MASCULINE_ORDINAL";
            bindings = <&kp O>, <&kp PT_MASCULINE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_S_dollar: control_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_S_DOLLAR";
            bindings = <&mt RIGHT_CONTROL S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        command_H_hash: command_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_H_HASH";
            bindings = <&mt RIGHT_COMMAND A>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_A_feminine_ordinal: control_A_feminine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_A_FEMININE_ORDINAL";
            bindings =
                <&mt LEFT_CONTROL A>,
                <&kp PT_FEMININE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        apost_slash: apost_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "APOST_SLASH";
            bindings = <&kp APOS>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        super_shift: super_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_SHIFT";
            bindings = <&hold_sticky LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        control_H_hash: control_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_H_HASH";
            bindings = <&hm RIGHT_CONTROL H>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_S_dollar: alt_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_S_DOLLAR";
            bindings = <&hm RIGHT_ALT S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash: comma_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH";
            bindings = <&kp PT_COMMA>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        X_percentage: X_percentage {
            compatible = "zmk,behavior-mod-morph";
            label = "X_PERCENTAGE";
            bindings = <&kp X>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        B_Ampersand: B_Ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "B_AMPERSAND";
            bindings = <&kp B>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_i_pipe: alt_i_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_I_PIPE";
            bindings = <&hm LEFT_ALT I>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        U_underscore: U_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UNDERSCORE";
            bindings = <&kp U>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash_backslash: comma_slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH_BACKSLASH";
            bindings = <&comma_slash>, <&kp PT_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        open_parentesis_less: open_parentesis_less {
            compatible = "zmk,behavior-mod-morph";
            label = "OPEN_PARENTESIS_LESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        close_parentesis_greater: close_parentesis_greater {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSE_PARENTESIS_GREATER";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        command_T_shift_same: command_T_shift_same {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_T_SHIFT_SAME";
            bindings = <&kp LG(T)>, <&kp LS(LG(T))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        command_R_shift_same: command_R_shift_same {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_R_SHIFT_SAME";
            bindings = <&kp LG(R)>, <&kp LS(LG(R))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        accents_C_Cedilha: accents_C_Cedilha {
            compatible = "zmk,behavior-hold-tap";
            label = "ACCENTS_C_CEDILHA";
            bindings = <&mo>, <&cecedilha>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <11 0>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <20 9>;
        };

        Globe {
            bindings = <&lt 3 GLOBE>;
            key-positions = <5 6>;
        };

        CopyPaste {
            bindings = <&hm K_PASTE K_COPY>;
            key-positions = <23 24>;
        };

        Math {
            bindings = <&sl 1>;
            key-positions = <30 31>;
        };

        qwert {
            bindings = <&sl 0>;
            key-positions = <16 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        QWERTY {
            bindings = <
        &kp Q        &kp W        &kp E           &kp R           &kp T                                    &kp Y      &kp U            &kp I            &kp O              &kp P
&trans  &hm LCTRL A  &hm LSHFT S  &hm LEFT_ALT D  &hm LEFT_GUI F  &lt 1 G                                  &lt 1 H    &hm RIGHT_GUI J  &hm RIGHT_ALT K  &hm RIGHT_SHIFT L  &hm RIGHT_CONTROL SEMI  &trans
&trans  &lt 4 Z      &kp X        &kp C           &kp V           &kp B      &kp C_PLAY_PAUSE  &kp K_MUTE  &kp N      &kp M            &kp COMMA        &kp DOT            &kp FSLH                &trans
                                  &kp LCTRL       &lt 1 TAB       &kp SPACE  &trans            &trans      &kp ENTER  &lt 3 BACKSPACE  &lt 2 ESC
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_NEXT C_PREV>;
            label = "QWERTY";
        };

        Math {
            bindings = <
        &lt 0 AMPS  &kp ASTRK  &kp RS(GRAVE)  &kp LPAR        &kp RPAR                         &kp FSLH   &kp N7  &kp N8  &kp N9  &kp N0
&trans  &kp DLLR    &kp PRCNT  &kp CARET      &kp LBKT        &kp RBKT                         &kp ASTRK  &kp N4  &kp N5  &kp N6  &kp PLUS   &trans
&trans  &kp EXCL    &kp AT     &kp POUND      &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans  &trans  &kp EQUAL  &kp N1  &kp N2  &kp N3  &kp MINUS  &trans
                               &trans         &trans          &trans           &trans  &trans  &trans     &trans  &trans
            >;

            label = "Math";
        };

        Nav {
            bindings = <
        &lt 0 EXCL    &kp GRAVE  &kp PT_SQT        &kp PT_DOUBLE_QUOTES  &trans                     &trans          &kp PAGE_DOWN   &kp PAGE_UP  &kp NUBS         &trans
&trans  &kp PT_TILDE  &kp NUBS   &kp SINGLE_QUOTE  &kp DQT               &kp EQUAL                  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP       &kp RIGHT_ARROW  &trans  &trans
&trans  &trans        &kp PIPE   &kp PT_C_CEDILLA  &kp LT                &kp GT     &trans  &trans  &trans          &kp END         &kp HOME     &kp PIPE         &trans  &trans
                                 &trans            &trans                &trans     &trans  &trans  &trans          &trans          &trans
            >;
        };

        ADJUST {
            bindings = <
        &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                     &bt BT_CLR      &kp F7                 &kp F8          &kp F9           &kp F10
&trans  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI                  &bt BT_NXT      &hm PAGE_UP PAGE_DOWN  &kp UP_ARROW    &hm INSERT HOME  &kp F11  &trans
&trans  &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &trans  &trans  &bt BT_CLR_ALL  &kp LEFT_ARROW         &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F12  &trans
                                          &trans           &trans           &trans           &trans  &trans  &trans          &trans                 &trans
            >;

            label = "ADJUST";
        };

        Function {
            bindings = <
        &trans  &trans  &trans  &trans  &trans                  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
            >;
        };
    };
};
